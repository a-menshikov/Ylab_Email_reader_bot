from enum import Enum
from typing import Generator

from aiogram.types import ReplyKeyboardMarkup

from config import DOMAINS_CHUNK_SIZE


class Buttons(Enum):
    """–ö–Ω–æ–ø–∫–∏ –±–æ—Ç–∞."""
    REG = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úÖ'
    CANCEL = '–û—Ç–º–µ–Ω–∞ ‚ùå'
    BACK = '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'
    ADD = '–î–æ–±–∞–≤–∏—Ç—å —è—â–∏–∫ üì©'
    BOXES = '–ú–æ–∏ —è—â–∏–∫–∏ üì´'
    ADD_FILTER = '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä üÜï'
    CLEAR_FILTERS = '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã üîÑ'
    END = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ ‚úÖ'
    APPROVE = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ'
    ACTIVATE = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚ñ∂Ô∏è'
    DEACTIVATE = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚èπ'
    INSTRUCTIONS = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ'


def chunck_buttons(buttons: list[str], size: int) -> Generator:
    """–†–∞–∑–±–∏–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —á–∞–Ω–∫–∏."""
    for i in range(0, len(buttons), size):
        yield buttons[i:i + size]


def registration_markup() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(Buttons.REG.value)

    return markup


def cancel_markup() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row(Buttons.BACK.value)
    markup.add(Buttons.CANCEL.value)

    return markup


def main_markup() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row(Buttons.ADD.value, Buttons.BOXES.value)
    markup.row(Buttons.INSTRUCTIONS.value)

    return markup


def domains_markup(domains: list[str]) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–º–µ–Ω–∞–º–∏."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    for row in chunck_buttons(domains, DOMAINS_CHUNK_SIZE):
        markup.row(*row)
    markup.add(Buttons.CANCEL.value)
    return markup


def filter_loop_markup() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row(Buttons.ADD_FILTER.value, Buttons.END.value)
    markup.add(Buttons.CLEAR_FILTERS.value)
    markup.row(Buttons.CANCEL.value)
    return markup


def approve_markup() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–æ–¥–∞."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row(Buttons.APPROVE.value)
    markup.add(Buttons.BACK.value)
    markup.row(Buttons.CANCEL.value)
    return markup


def my_boxes_markup(username_list: list[str]) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æc–º–æ—Ç—Ä–∞ —è—â–∏–∫–æ–≤."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    for username in username_list:
        markup.row(username)
    markup.add(Buttons.CANCEL.value)
    return markup


def one_box_markup(status: bool) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è—â–∏–∫–∞."""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    if status:
        markup.row(Buttons.DEACTIVATE.value)
    else:
        markup.row(Buttons.ACTIVATE.value)
    markup.add(Buttons.CANCEL.value)
    return markup
